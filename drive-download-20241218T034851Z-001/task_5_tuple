{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMKM+DKUMGY7kHp/WlqMwjy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["\n","\n","# Tuple\n","\n","\n","*   Tuple is **immutable** meaning once created,elements cannot be changed as list and sets\n","\n","*   **Ordered** this feature of tuple helps in maintaing order and can be accessed by index\n","*   **Heterogeneous**  A tuple can contain all different data types\n","\n","\n","*   Tuples are defined using parentheses\n","\n","\n","\n"],"metadata":{"id":"ehiPf_KBYbfj"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KlicH2HyXk-3","executionInfo":{"status":"ok","timestamp":1733730844849,"user_tz":-330,"elapsed":782,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"8535de0e-98b4-469d-c5af-5e0c65e9ce3b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 4, 5, 6, 7)"]},"metadata":{},"execution_count":1}],"source":[" # creating a tuple\n","a = (1,4,5,6,7)\n","a"]},{"cell_type":"code","source":["# create an empty tuple\n","a = ()\n","a = tuple()\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"burQXNzoaVXS","executionInfo":{"status":"ok","timestamp":1733730927503,"user_tz":-330,"elapsed":662,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"a58e5659-fd3f-4821-97ce-326847484daa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["()\n"]}]},{"cell_type":"code","source":["# length of a tuple\n","a = (1,4,5,6,7)\n","print(len(a))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VQLgUbhTahjq","executionInfo":{"status":"ok","timestamp":1733730982329,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"9d81031e-4259-4efe-95ea-af0588f69e74"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","source":["# creating a tuple of length 1\n","a = ('1')\n","print('length:\\t',len(a))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5o5sddha2Gw","executionInfo":{"status":"ok","timestamp":1733731090814,"user_tz":-330,"elapsed":482,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"ecf3b58f-1b3a-48e6-b838-59c10a43f18a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["length:\t 1\n"]}]},{"cell_type":"code","source":["# heterogeneous tuple\n","a = (1,2,3,'abc',6+5j,)\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AZRmpaEobRWT","executionInfo":{"status":"ok","timestamp":1733731155031,"user_tz":-330,"elapsed":9,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"2c4b6586-140a-447d-e6c3-cf932aa63314"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 2, 3, 'abc', (6+5j))\n"]}]},{"cell_type":"markdown","source":["## Indexing\n","\n","\n","*   Tuples are orderd so accesing a element in tuple is done by index\n","*   Indexing in tuples start with 0 and last element can be accessed by -1\n","*  Index can be a negative integer\n","\n","## Slicing\n","\n","\n","*   slicing a tuple or list allows to exactly extract required elements from the tuples or list\n","*   sequence in slicing is as followed\n","     list or tuple[start:end:step]\n","\n","\n","*   default values are set for start,end and step. default for start is 0 index, end is len(x),step =1\n","\n","*   There are two types of slicing\n","\n","1.   positive slicing : a[::1]\n","2.   negative slicing : a[::-1]\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"Ez7mGAA1blGe"}},{"cell_type":"code","source":["# list[start:end:step]\n","a = (0,1,2,3,4,5,6,7,8,9)\n","\n","print(a[:-1])\n","print(a[1:])\n","print(a[3:9])\n","print(a[-2:1:-1])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9Qnb2m-mbgep","executionInfo":{"status":"ok","timestamp":1733731869592,"user_tz":-330,"elapsed":27,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"605d5b3a-36f1-4843-cd86-3d1e0310ac02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(0, 1, 2, 3, 4, 5, 6, 7, 8)\n","(1, 2, 3, 4, 5, 6, 7, 8, 9)\n","(3, 4, 5, 6, 7, 8)\n","(8, 7, 6, 5, 4, 3, 2)\n"]}]},{"cell_type":"code","source":["# create a tuple of len 5, add a list in the tuple\n","a = (1,4,6,[\"abc\",\"bat\"],\"cat\")\n","a[3].append(8)\n","print(f'{a}\\t,length:{len(a)}\\t,{a[3]}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZSbR2l0zePQW","executionInfo":{"status":"ok","timestamp":1733732159097,"user_tz":-330,"elapsed":610,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"339ae126-0619-4000-a36a-486335d9482e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 4, 6, ['abc', 'bat', 8], 'cat')\t,length:5\t,['abc', 'bat', 8]\n"]}]},{"cell_type":"code","source":["# tuple methods\n","dir(tuple)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2WAjWHI8ev8T","executionInfo":{"status":"ok","timestamp":1733732184364,"user_tz":-330,"elapsed":441,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"e75149a6-64be-4b8f-ffb7-f9d76a19be7a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['__add__',\n"," '__class__',\n"," '__class_getitem__',\n"," '__contains__',\n"," '__delattr__',\n"," '__dir__',\n"," '__doc__',\n"," '__eq__',\n"," '__format__',\n"," '__ge__',\n"," '__getattribute__',\n"," '__getitem__',\n"," '__getnewargs__',\n"," '__gt__',\n"," '__hash__',\n"," '__init__',\n"," '__init_subclass__',\n"," '__iter__',\n"," '__le__',\n"," '__len__',\n"," '__lt__',\n"," '__mul__',\n"," '__ne__',\n"," '__new__',\n"," '__reduce__',\n"," '__reduce_ex__',\n"," '__repr__',\n"," '__rmul__',\n"," '__setattr__',\n"," '__sizeof__',\n"," '__str__',\n"," '__subclasshook__',\n"," 'count',\n"," 'index']"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# count and index functions\n","a = (4,3,5,5,5,2,2,4)\n","print(a.count(5))\n","print(a.index(5))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"adGhaY9mfeEz","executionInfo":{"status":"ok","timestamp":1733732239316,"user_tz":-330,"elapsed":515,"user":{"displayName":"Jaya Krishna Reddy","userId":"08050986145121788625"}},"outputId":"da846eb1-04f3-4307-942f-85401aebedd7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n","2\n"]}]},{"cell_type":"markdown","source":["*why are tuples faster than lists in python*\n","\n","1.   **Immutability** SInce tuples are immutable, they require fewer operation to manage. like no append functions and many more compared to lists\n","\n","2.   list include more space because of element modification adn resizing while tuples don't have this **complexity**\n","\n","3. **Memory** **Effiency**  tuples consume less memory than list because they don't include extra space for appending or resizing contributes to faster performance\n","4. pythons internal handling of tuples is **optimizes** for speed because of they often use in fixed collections\n","\n","\n","\n"],"metadata":{"id":"QdAYULy6fvRP"}},{"cell_type":"markdown","source":[],"metadata":{"id":"No4tUV9Pa_uy"}}]}